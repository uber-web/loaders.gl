{"data":{"docBySlug":{"html":"<h1 id=\"data-frame-operations\"><a href=\"#data-frame-operations\" aria-label=\"data frame operations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Frame Operations</h1>\n<p>Note that <code class=\"language-text\">Table</code> inherits from <code class=\"language-text\">DataFrame</code>, so many examples will apply <code class=\"language-text\">DataFrame</code> methods to <code class=\"language-text\">Table</code>s.</p>\n<p>Part of the power of data frame operations is that they typically do not actually perform any modifications (copying etc) of the underlying data, and ultimately only impact how iteration over that data is done, and what \"view\" of the data is presented. This allows data frame operations to be extremely performant, even when applied on very big (multi-gigabyte) data aset.</p>\n<p>Most of the data frame operations do not modify the original <code class=\"language-text\">Table</code> or <code class=\"language-text\">DataFrame</code>, but rather return a new similar object with the new \"iteration constraints\" applied.</p>\n<p>References:</p>\n<ul>\n<li>Much of the text in this section is adapted from Brian Hulette's <a href=\"https://observablehq.com/@theneuralbit/introduction-to-apache-arrow\">Introduction to Apache Arrow</a></li>\n</ul>\n<h2 id=\"removing-rows\"><a href=\"#removing-rows\" aria-label=\"removing rows permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removing Rows</h2>\n<p>The simples way to remove rows from a data frame mey be use <code class=\"language-text\">Table.slice(start, end)</code>. As usual this operation return <code class=\"language-text\">Table</code>/<code class=\"language-text\">DataFrame</code> with iteration constrained to a sub set of the rows in the original frame.</p>\n<h2 id=\"removing-columns\"><a href=\"#removing-columns\" aria-label=\"removing columns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removing Columns</h2>\n<p>The <code class=\"language-text\">Table.select(keys: String[])</code> method drops all columns except the ones that match the supplied <code class=\"language-text\">keys</code>.</p>\n<h2 id=\"filtering-rows\"><a href=\"#filtering-rows\" aria-label=\"filtering rows permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering Rows</h2>\n<p>Another way to \"remove\" rows fromn data frames to apply filters. Filters effectively remove rows from the data frame that don't fullfill the predicates in the filter.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selectedName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dataFrame <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>arrow<span class=\"token punctuation\">.</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">col</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>selectedName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Remove all rows</span></code></pre></div>\n<p>The provided predicates allows for the comparison of column values against literals or javascript values (equality, greater or equal than, less or equal than) as well as the creation of composite logical expressions (<code class=\"language-text\">and</code>, <code class=\"language-text\">or</code> and <code class=\"language-text\">not</code>) out of individual column comparisons.</p>\n<p>It is of course also possible to write custom predicates by supplying an arbitrary JavaScript function to filter a row, however performance is usually best when using the built-in comparison predicates.</p>\n<blockquote>\n<p>Note that calling <code class=\"language-text\">filter()</code> on a <code class=\"language-text\">DataFrame</code> doesn't actually remove any rows from the underlying data store (it just stores the predicates). It's not until you iterate over the date, e.g. by calling <code class=\"language-text\">countBy()</code> or <code class=\"language-text\">scan()</code> that we actually scan through all of the data.</p>\n</blockquote>\n<h2 id=\"counting-rows\"><a href=\"#counting-rows\" aria-label=\"counting rows permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Counting Rows</h2>\n<p>To count the number of times different values appear in a table, use <code class=\"language-text\">countBy()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newTable <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">countBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'column_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that <code class=\"language-text\">countBy()</code> does not return a modified data frame or table, but instead returns a new <code class=\"language-text\">Table</code> that contains two columns, <code class=\"language-text\">value</code> and <code class=\"language-text\">count</code>. Each distinct value in the specified column in the original table is listed once in <code class=\"language-text\">value</code>, and the corresponding <code class=\"language-text\">count</code> field in the same row indicates how many times it was present in the original table.</p>\n<p>Note: Technically a subclass called <code class=\"language-text\">CountByResult</code>).</p>\n<p>Note that the results are not sorted.</p>\n<h2 id=\"sorting\"><a href=\"#sorting\" aria-label=\"sorting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sorting</h2>\n<p>DataFrames do not currently support sorting. To sort you need to move the data back to JavaScript arrays.</p>\n<h2 id=\"iterating-over-a-dataframe-scanning\"><a href=\"#iterating-over-a-dataframe-scanning\" aria-label=\"iterating over a dataframe scanning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterating over a DataFrame (Scanning)</h2>\n<p>The <code class=\"language-text\">DataFrame.scan()</code> method lets you define a custom function that will be called for each (non-filtered) record in the <code class=\"language-text\">DataFrame</code>.</p>\n<p>Note: For simpler use cases, it is recommended to use the Arrow API provided predicates etc rather than writing a custom scan function, as performance will often be better.</p>\n<h3 id=\"writing-a-code-classlanguage-textnextcode-callback-for-code-classlanguage-textscancode\"><a href=\"#writing-a-code-classlanguage-textnextcode-callback-for-code-classlanguage-textscancode\" aria-label=\"writing a code classlanguage textnextcode callback for code classlanguage textscancode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a <code class=\"language-text\">next</code> callback for <code class=\"language-text\">scan()</code></h3>\n<p>In order to be more efficient, Arrow data is broken up into batches of records (which is what makes it possible to do concatenations despite the columnar layout, and <code class=\"language-text\">DataFrame.scan()</code> does not hide this implementation detail from you.</p>\n<h3 id=\"optimizing-code-classlanguage-textscancode-performance-with-code-classlanguage-textbindcode-callbacks\"><a href=\"#optimizing-code-classlanguage-textscancode-performance-with-code-classlanguage-textbindcode-callbacks\" aria-label=\"optimizing code classlanguage textscancode performance with code classlanguage textbindcode callbacks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizing <code class=\"language-text\">scan()</code> performance with <code class=\"language-text\">bind()</code> callbacks</h3>\n<p>In addition to the <code class=\"language-text\">next</code> callback, you can supply a <code class=\"language-text\">bind</code> function for scan to call each time it starts reading from a new <code class=\"language-text\">RecordBatch</code>. <code class=\"language-text\">scan</code> will call these functions as illustrated in the following pseudo-code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>batch <span class=\"token keyword\">of</span> batches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>idx <span class=\"token keyword\">in</span> batch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note:</p>\n<ul>\n<li>The idx passed to next only applies to the current RecordBatch, it is not a global index.</li>\n<li>The current <code class=\"language-text\">RecordBatch</code> is passed to <code class=\"language-text\">next</code>, so it is possible to access data without writing a bind function, but there will be a performance penalty if your data has a lot of batches.</li>\n</ul>","timeToRead":4,"excerpt":"Data Frame Operations Note that   inherits from  , so many examples will apply   methods to  s. Part of the power of data frame operations…","frontmatter":{"title":"Data Frame Operations","cover":"cover","category":"docs","tags":["default"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"relativeLinks":{"../../README.md":"/docs","arrow/docs/README.md":"/docs","../..":"/docs","docs":"/docs","../../whats-new.md":"/docs/whats-new","arrow/docs/whats-new.md":"/docs/whats-new","../../whats-new":"/docs/whats-new","docs/whats-new":"/docs/whats-new","../../roadmap.md":"/docs/roadmap","arrow/docs/roadmap.md":"/docs/roadmap","../../roadmap":"/docs/roadmap","docs/roadmap":"/docs/roadmap","../../notes.md":"/docs/notes","arrow/docs/notes.md":"/docs/notes","../../notes":"/docs/notes","docs/notes":"/docs/notes","../README.md":"/docs/developer-guide","arrow/docs/developer-guide/README.md":"/docs/developer-guide","..":"/docs/developer-guide","docs/developer-guide":"/docs/developer-guide","../big-ints.md":"/docs/developer-guide/big-ints","arrow/docs/developer-guide/big-ints.md":"/docs/developer-guide/big-ints","../big-ints":"/docs/developer-guide/big-ints","docs/developer-guide/big-ints":"/docs/developer-guide/big-ints","../converting-data.md":"/docs/developer-guide/converting-data","arrow/docs/developer-guide/converting-data.md":"/docs/developer-guide/converting-data","../converting-data":"/docs/developer-guide/converting-data","docs/developer-guide/converting-data":"/docs/developer-guide/converting-data","../data-types.md":"/docs/developer-guide/data-types","arrow/docs/developer-guide/data-types.md":"/docs/developer-guide/data-types","../data-types":"/docs/developer-guide/data-types","docs/developer-guide/data-types":"/docs/developer-guide/data-types","../data-sources.md":"/docs/developer-guide/data-sources","arrow/docs/developer-guide/data-sources.md":"/docs/developer-guide/data-sources","../data-sources":"/docs/developer-guide/data-sources","docs/developer-guide/data-sources":"/docs/developer-guide/data-sources","../getting-started.md":"/docs/developer-guide/getting-started","arrow/docs/developer-guide/getting-started.md":"/docs/developer-guide/getting-started","../getting-started":"/docs/developer-guide/getting-started","docs/developer-guide/getting-started":"/docs/developer-guide/getting-started","../memory-management.md":"/docs/developer-guide/memory-management","arrow/docs/developer-guide/memory-management.md":"/docs/developer-guide/memory-management","../memory-management":"/docs/developer-guide/memory-management","docs/developer-guide/memory-management":"/docs/developer-guide/memory-management","../predicates.md":"/docs/developer-guide/predicates","arrow/docs/developer-guide/predicates.md":"/docs/developer-guide/predicates","../predicates":"/docs/developer-guide/predicates","docs/developer-guide/predicates":"/docs/developer-guide/predicates","../reading-and-writing.md":"/docs/developer-guide/reading-and-writing","arrow/docs/developer-guide/reading-and-writing.md":"/docs/developer-guide/reading-and-writing","../reading-and-writing":"/docs/developer-guide/reading-and-writing","docs/developer-guide/reading-and-writing":"/docs/developer-guide/reading-and-writing","../tables.md":"/docs/developer-guide/tables","arrow/docs/developer-guide/tables.md":"/docs/developer-guide/tables","../tables":"/docs/developer-guide/tables","docs/developer-guide/tables":"/docs/developer-guide/tables","../typescript.md":"/docs/developer-guide/typescript","arrow/docs/developer-guide/typescript.md":"/docs/developer-guide/typescript","../typescript":"/docs/developer-guide/typescript","docs/developer-guide/typescript":"/docs/developer-guide/typescript","../../api-reference/README.md":"/docs/api-reference","arrow/docs/api-reference/README.md":"/docs/api-reference","../../api-reference":"/docs/api-reference","docs/api-reference":"/docs/api-reference","../../api-reference/column.md":"/docs/api-reference/column","arrow/docs/api-reference/column.md":"/docs/api-reference/column","../../api-reference/column":"/docs/api-reference/column","docs/api-reference/column":"/docs/api-reference/column","":"/docs/developer-guide/data-frame-operations","arrow/docs/developer-guide/data-frame-operations.md":"/docs/developer-guide/data-frame-operations","docs/developer-guide/data-frame-operations":"/docs/developer-guide/data-frame-operations","../../api-reference/data-frame.md":"/docs/api-reference/data-frame","arrow/docs/api-reference/data-frame.md":"/docs/api-reference/data-frame","../../api-reference/data-frame":"/docs/api-reference/data-frame","docs/api-reference/data-frame":"/docs/api-reference/data-frame","../../api-reference/predicates.md":"/docs/api-reference/predicates","arrow/docs/api-reference/predicates.md":"/docs/api-reference/predicates","../../api-reference/predicates":"/docs/api-reference/predicates","docs/api-reference/predicates":"/docs/api-reference/predicates","../../api-reference/dictionary.md":"/docs/api-reference/dictionary","arrow/docs/api-reference/dictionary.md":"/docs/api-reference/dictionary","../../api-reference/dictionary":"/docs/api-reference/dictionary","docs/api-reference/dictionary":"/docs/api-reference/dictionary","../../api-reference/record-batch-reader.md":"/docs/api-reference/record-batch-reader","arrow/docs/api-reference/record-batch-reader.md":"/docs/api-reference/record-batch-reader","../../api-reference/record-batch-reader":"/docs/api-reference/record-batch-reader","docs/api-reference/record-batch-reader":"/docs/api-reference/record-batch-reader","../../api-reference/field.md":"/docs/api-reference/field","arrow/docs/api-reference/field.md":"/docs/api-reference/field","../../api-reference/field":"/docs/api-reference/field","docs/api-reference/field":"/docs/api-reference/field","../../api-reference/row.md":"/docs/api-reference/row","arrow/docs/api-reference/row.md":"/docs/api-reference/row","../../api-reference/row":"/docs/api-reference/row","docs/api-reference/row":"/docs/api-reference/row","../../api-reference/data.md":"/docs/api-reference/data","arrow/docs/api-reference/data.md":"/docs/api-reference/data","../../api-reference/data":"/docs/api-reference/data","docs/api-reference/data":"/docs/api-reference/data","../../api-reference/record-batch.md":"/docs/api-reference/record-batch","arrow/docs/api-reference/record-batch.md":"/docs/api-reference/record-batch","../../api-reference/record-batch":"/docs/api-reference/record-batch","docs/api-reference/record-batch":"/docs/api-reference/record-batch","../../api-reference/schema.md":"/docs/api-reference/schema","arrow/docs/api-reference/schema.md":"/docs/api-reference/schema","../../api-reference/schema":"/docs/api-reference/schema","docs/api-reference/schema":"/docs/api-reference/schema","../../api-reference/struct-vector.md":"/docs/api-reference/struct-vector","arrow/docs/api-reference/struct-vector.md":"/docs/api-reference/struct-vector","../../api-reference/struct-vector":"/docs/api-reference/struct-vector","docs/api-reference/struct-vector":"/docs/api-reference/struct-vector","../../api-reference/types.md":"/docs/api-reference/types","arrow/docs/api-reference/types.md":"/docs/api-reference/types","../../api-reference/types":"/docs/api-reference/types","docs/api-reference/types":"/docs/api-reference/types","../../api-reference/vector.md":"/docs/api-reference/vector","arrow/docs/api-reference/vector.md":"/docs/api-reference/vector","../../api-reference/vector":"/docs/api-reference/vector","docs/api-reference/vector":"/docs/api-reference/vector","../../api-reference/record-batch-writer.md":"/docs/api-reference/record-batch-writer","arrow/docs/api-reference/record-batch-writer.md":"/docs/api-reference/record-batch-writer","../../api-reference/record-batch-writer":"/docs/api-reference/record-batch-writer","docs/api-reference/record-batch-writer":"/docs/api-reference/record-batch-writer","../../api-reference/table.md":"/docs/api-reference/table","arrow/docs/api-reference/table.md":"/docs/api-reference/table","../../api-reference/table":"/docs/api-reference/table","docs/api-reference/table":"/docs/api-reference/table","../../api-reference/vectors.md":"/docs/api-reference/vectors","arrow/docs/api-reference/vectors.md":"/docs/api-reference/vectors","../../api-reference/vectors":"/docs/api-reference/vectors","docs/api-reference/vectors":"/docs/api-reference/vectors","../../api-reference/chunked.md":"/docs/api-reference/chunked","arrow/docs/api-reference/chunked.md":"/docs/api-reference/chunked","../../api-reference/chunked":"/docs/api-reference/chunked","docs/api-reference/chunked":"/docs/api-reference/chunked"},"slug":"docs/developer-guide/data-frame-operations","toc":"docs"}}