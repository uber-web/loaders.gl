# Category; 3D Tiles

> The 3D tiles category is still under development.

The 3D Tiles category generalizes hierarchical geospatial data structures. It is being developed for the 3D Tiles standard but may be generalized to handle `i3s` and `potree` formats as well.


## Concepts

* *Tile Header Hierarchy* - An initial, "minimal" set of data listing the *hierarchy of available tiles*, with  minimal information to allow an application to determine which tiles need to be loaded based on a certain viewing position in 3d space.
* *Tile Header* - A minimal header describing a tiles bounding volume and a screen space error tolerance (allowing the tile to be culled if it is distant), as well as the URL to load the tile's actual content from.
* *Tile Cache* - Since the number of tiles in big tilesets often exceed what can be loaded into available memory, it is important to have a system that releases no-longer visible tiles from memory.
* *Tileset Traversal* - Dynamically loading and rendering 3D tiles based on current viewing position, possibly triggering loads of new tiles and unloading of older, no-longer visible tiles.


## Tileset Traversal Support

Dynamically loading and rendering 3D tile is fairly complex as it requires a significant amount of geospatial and culling math, as well as tile selection and caching logic.

Therefore, in addition to basic loaders for the tileset and individual tile formats, loaders.gl provides an (optional) tileset traversal class.

By loading a top-level tileset file, instantiating a `Tileset3D` class, and calling `Tileset3D.traverse(camera parameters)` the tiles required to show a view from that camera position will be loaded.

Since tile loads happen asynchronously, `Tileset3D` allows callbacks to be registered that notifies the app when the set of tiles available for rendering has changed.

## Coordinate Systems

Matrices are provided to enable tiles to be used in fixed frame or lng/lat-relative, east-north-up (ENU) coordinate systems:

* *cartesian*  WGS84 fixed frame coordinates
* *cartographic*  tile geometry positions to ENU meter offsets from `cartographicOrigin`.

Position units in both cases are in meters.

For cartographic coordinates, tiles come with a prechosen cartographic origin and precalculated model matrix. This cartographic origin is "arbitrary" (chosen based on the tiles bounding volume center). A different origin can be chosen and a transform can be calculated, e.g. using the math.gl `Ellipsoid` class.


## Tileset Fields

| Field        | Type                | Contents     |
| ------------ | ------------------- | ------------ |
| `asset`              | `Object` (Optional) |  |
| `root`               | `Object`    | The root tile header |
| `cartesianCenter`    | `Number[3]` | Center of tileset in fixed frame coordinates |
| `cartographicCenter` | `Number[3]` | Center of tileset in cartographic coordinates `[long, lat, elevation]` |
| `webMercatorZoom`    | `Number[3]` | A web mercator zoom level that displays the entire tile set bounding volume |

## TileHeader Fields

| Field            | Type                | Contents     |
| ---------------- | ------------------- | ------------ |
| `boundingVolume` | `Object`            |  |


## Tile Fields

### Common Fields

| Field        | Type                | Contents     |
| ------------ | ------------------- | ------------ |
| `loaderData` | `Object` (Optional) | Format specific data |
| `version`    | `Number`            | See [Header](#header)    |
| `type`       | `String`            | See [Mode](#mode)    |
| `cartesianOrigin`         | `Number[3]`  | "Center" of tile geometry in WGS84 fixed frame coordinates    |
| `cartographicOrigin`      | `Number[3]`  | "Origin" in lng/lat (center of tile's bounding volume)    |
| `cartesianModelMatrix`    | `Number[16]` | Transforms tile geometry positions to fixed frame coordinates   |
| `cartographicModelMatrix` | `Number[16]` | Transforms tile geometry positions to ENU meter offsets from `cartographicOrigin`. |


### PointCloudTile Fields

| Field                        | Type                | Contents     |
| --------------               | -------- | -------- |
| `attributes`                 | `Object` | Values are [accessor](#accessor) objects.  |
| `attributes.positions.value` | `Float32Array`  |   |
| `attributes.normals.value`   | `Float32Array`  |   |
| `attributes.colors.value`    | `Uint8Array`    |   |

TBA - batch ids?


### Instanced3DModelTile Fields

| Field          | Type     | Contents     |
| -------------- | -------- | -------- |
| `modelMatrix`  | | |


### PointCloudTile Fields

| Field          | Type     | Contents     |
| -------------- | -------- | -------- |


### CompositeTile Fields

| Field          | Type       | Contents     |
| -------------- | --------   | -------- |
| `tiles`        | `Object[]` | Array of parsed tile objects |


### Accessors

Following vis.gl conventions, `attributes` are represented by "glTF-style" accessor objects with the `value` field containing the binary data for that attribute stored in a typed array of the proper type.

| Accessors Fields | glTF? | Type         | Contents       |
| ---------------- | ----- | ------------ | -------------- |
| `value`          | No    | `TypedArray` | Contains the typed array (corresponds to `bufferView`). The type of the array will match the GL constant in `componentType`. |
| `size`           | No    | `Number`      | Number of components, `1`-`4`. |
| `byteOffset`     | Yes   | `Number`     | Starting offset into the bufferView. |
| `count`          | Yes   | `Number`     | The number of elements/vertices in the attribute data. |
