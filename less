commit f635482a179498e4d68760a83cca4e2ba0812906
Author: Ib Green <ib@unfolded.ai>
Date:   Tue Jun 30 17:25:50 2020 -0700

    core: loader option util improvements (#833)

diff --git a/modules/core/src/lib/loader-utils/option-utils.js b/modules/core/src/lib/loader-utils/option-utils.js
new file mode 100644
index 00000000..235d66cc
--- /dev/null
+++ b/modules/core/src/lib/loader-utils/option-utils.js
@@ -0,0 +1,197 @@
+import {global} from '@loaders.gl/loader-utils';
+import {isPureObject, isObject} from '../../javascript-utils/is-type';
+import {NullLog, ConsoleLog} from './loggers';
+
+const DEFAULT_LOADER_OPTIONS = {
+  CDN: 'https://unpkg.com/@loaders.gl',
+  worker: true, // By default, use worker if provided by loader
+  log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console
+  metadata: false // TODO - currently only implemented for parseInBatches, adds initial metadata batch,
+};
+
+const DEPRECATED_LOADER_OPTIONS = {
+  dataType: '(no longer used)',
+  uri: 'baseUri'
+};
+
+// Helper to reliably get global loader state
+// Wraps initialization of global variable in function to defeat overly agressive tree-shakers
+export const getGlobalLoaderState = () => {
+  // @ts-ignore
+  global.loaders = global.loaders || {};
+  // @ts-ignore
+  const {loaders} = global;
+
+  // Add _state object to keep separate from modules added to global.loaders
+  loaders._state = loaders._state || {};
+  return loaders._state;
+};
+
+// Store global loader options on the global object to increase chances of cross loaders-version interoperability
+// NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks
+const getGlobalLoaderOptions = () => {
+  const state = getGlobalLoaderState();
+  // Ensure all default loader options from this library are mentioned
+  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};
+  return state.globalOptions;
+};
+
+// Set global loader options
+export function setGlobalOptions(options) {
+  const state = getGlobalLoaderState();
+  const globalOptions = getGlobalLoaderOptions();
+  state.globalOptions = normalizeOptionsInternal(globalOptions, options);
+}
+
+export function getOptions(options = {}) {
+  // Note: No options validation at this stage
+  const mergedOptions = {...options};
+
+  // LOGGING: options.log can be set to `null` to defeat logging, but should always be a valid log
+  // TODO - move to context, no need to modify options...
+  // @ts-ignore
+  if (mergedOptions.log === null) {
+    // @ts-ignore
+    mergedOptions.log = new NullLog();
+  }
+
+  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
+  return mergedOptions;
+}
+
+// Merges options with global opts and loader defaults, also injects baseUri
+export function normalizeOptions(options, loader, loaders, url) {
+  loaders = loaders || [];
+  loaders = Array.isArray(loaders) ? loaders : [loaders];
+
+  validateOptions(options, loaders);
+  return normalizeOptionsInternal(loader, options, url);
+}
+
+// VALIDATE OPTIONS
+
+/**
+ * Warn for unsupported options
+ * @param {object} options
+ * @param {*} loaders
+ * @param {*} log
+ */
+function validateOptions(
+  options,
+  loaders,
+  // eslint-disable-next-line
+  log = console
+) {
+  // Check top level options
+  validateOptionsObject(
+    options,
+    null,
+    log,
+    DEFAULT_LOADER_OPTIONS,
+    DEPRECATED_LOADER_OPTIONS,
+    loaders
+  );
+
+  for (const loader of loaders) {
+    // Get the scoped, loader specific options from the user supplied options
+    const idOptions = (options && options[loader.id]) || {};
+
+    // Get scoped, loader specific default and deprecated options from the selected loader
+    const loaderOptions = (loader.options && loader.options[loader.id]) || {};
+    const deprecatedOptions = (loader.defaultOptions && loader.defaultOptions[loader.id]) || {};
+
+    // Validate loader specific options
+    validateOptionsObject(idOptions, loader.id, log, loaderOptions, deprecatedOptions, loaders);
+  }
+}
+
+// eslint-disable-next-line max-params
+function validateOptionsObject(options, id, log, defaultOptions, deprecatedOptions, loaders) {
+  const loaderName = id || 'Top level';
+  const prefix = id ? `${id}.` : '';
+
+  for (const key in options) {
+    const isSubOptions = !id && isObject(options[key]);
+    if (!isSubOptions && !(key in defaultOptions)) {
+      // Issue deprecation warnings
+      if (key in deprecatedOptions) {
+        log.warn(
+          `${loaderName} loader option \'${prefix}${key}\' deprecated, use \'${
+            deprecatedOptions[key]
+          }\'`
+        );
+      } else {
+        const suggestion = findSimilarOption(key, loaders);
+        log.warn(`${loaderName} loader option \'${prefix}${key}\' not recognized. ${suggestion}`);
+      }
+    }
+  }
+}
+
+function findSimilarOption(optionKey, loaders) {
+  const lowerCaseOptionKey = optionKey.toLowerCase();
+  let bestSuggestion = '';
+  for (const loader of loaders) {
+    for (const key in loader.options) {
+      if (optionKey === key) {
+        return `Did you mean \'${loader.id}.${key}\'?`;
+      }
+      const lowerCaseKey = key.toLowerCase();
+      const isPartialMatch =
+        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);
+      if (isPartialMatch) {
+        bestSuggestion = bestSuggestion || `Did you mean \'${loader.id}.${key}\'?`;
+      }
+    }
+  }
+  return bestSuggestion;
+}
+
+function normalizeOptionsInternal(loader, options, url) {
+  const loaderDefaultOptions = loader.options || {};
+
+  const mergedOptions = {...loaderDefaultOptions};
+
+  addUrlOptions(mergedOptions, url);
+
+  // LOGGING: options.log can be set to `null` to defeat logging
+  if (mergedOptions.log === null) {
+    mergedOptions.log = new NullLog();
+  }
+
+  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
+  mergeNestedFields(mergedOptions, options);
+
+  return mergedOptions;
+}
+
+// Merge nested options objects
+function mergeNestedFields(mergedOptions, options) {
+  for (const key in options) {
+    // Check for nested options
+    // object in options => either no key in defaultOptions or object in defaultOptions
+    if (key in options) {
+      const value = options[key];
+      if (isPureObject(value) && isPureObject(mergedOptions[key])) {
+        mergedOptions[key] = {
+          ...mergedOptions[key],
+          ...options[key]
+        };
+      } else {
+        mergedOptions[key] = options[key];
+      }
+    }
+    // else: No need to merge nested opts, and the initial merge already copied over the nested options
+  }
+}
+
+// Harvest information from the url
+// TODO - baseUri should be a directory, i.e. remove file component from baseUri
+// TODO - extract extension?
+// TODO - extract query parameters?
+// TODO - should these be injected on context instead of options?
+function addUrlOptions(options, url) {
+  if (url && !('baseUri' in options)) {
+    options.baseUri = url;
+  }
+}
